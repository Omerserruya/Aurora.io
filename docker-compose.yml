services:
  tf-service:
    build:
      context: ./terraformService
      dockerfile: Dockerfile
    environment:
      - PORT=${PORT_TF}
      - HOST=0.0.0.0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DB_SERVICE_URL=${DB_SERVICE_URL}
    ports:
      - "${TF_SERVICE_PORT:-7810}:7810"  # For direct access to Terraform service
    networks:
      - default

  users-service:
    build:
      context: ./userMgmntService
      dockerfile: Dockerfile
    volumes:
      - ./userMgmntService/src:/app/src
      - ./userMgmntService/package.json:/app/package.json
      - ./userMgmntService/tsconfig.json:/app/tsconfig.json
      - ./shared:/app/shared
      - ./userMgmntService/uploads:/app/uploads
    environment:
      - PORT=${PORT_USERS}
      - NODE_ENV=${NODE_ENV}
      - PROFILE_UPLOAD_PATH=${PROFILE_UPLOAD_PATH}
      - MONGODB_URL=${MONGODB_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - MONGODB_USER=${MONGODB_USER}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - MONGODB_DATABASE=${MONGODB_DATABASE}
      - ENV_URL=${ENV_URL}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "4001:4001"  # For direct access
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: wget -O /dev/null -q http://localhost:4001 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  auth-service:
    build:
      context: ./authService
      dockerfile: Dockerfile
    volumes:
      - ./authService/src:/app/src
      - ./authService/package.json:/app/package.json
      - ./authService/tsconfig.json:/app/tsconfig.json
      - ./shared:/app/shared
    environment:
      - PORT=${PORT_AUTH}
      - NODE_ENV=${NODE_ENV}
      - USER_SERVICE_URL=${USER_SERVICE_URL}
      - MONGODB_URL=${MONGODB_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_REFRESH_KEY=${JWT_REFRESH_KEY}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN}
      - PROFILE_UPLOAD_PATH=${PROFILE_UPLOAD_PATH}
      - ENV_URL=${ENV_URL}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - GITHUB_CALLBACK_URL=${GITHUB_CALLBACK_URL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_CALLBACK_URL=${GOOGLE_CALLBACK_URL}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "4002:4002"  # For direct access
    depends_on:
      mongodb:
        condition: service_healthy
      users-service:
        condition: service_healthy
    healthcheck:
      test: wget -O /dev/null -q http://localhost:4002/ || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mongodb:
    image: mongo:latest
    command: ["--bind_ip_all", "--logpath", "/dev/null"]
    environment:
      - MONGO_INITDB_DATABASE=aurora
    volumes:
      - /opt/services/mongodb:/data/db
    ports:
      - "27017:27017"
    networks:
      - default
    restart: always
    healthcheck:
      test: mongosh --eval 'db.runCommand("ping").ok' mongodb://localhost:27017/admin --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  neo4j:
    image: neo4j:latest
    environment:
      - NEO4J_AUTH=neo4j/aurora1234
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_logs_debug_level=INFO
    volumes:
      - /opt/services/neo4j/data:/data
      - /opt/services/neo4j/logs:/logs
      - /opt/services/neo4j/import:/var/lib/neo4j/import
      - /opt/services/neo4j/plugins:/plugins
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - default
    healthcheck:
      test: ["CMD-SHELL", "neo4j status | grep -q 'Neo4j is running' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"  # HTTP port for local development
      - "443:443"
    volumes:
      - /etc/aurora/ssl:/etc/ssl
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./userMgmntService/uploads:/app/uploads:ro
      - ./frontend/build:/usr/share/nginx/html:ro  # Serve React build files
    depends_on:
      users-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      db-service:
        condition: service_healthy
      chatbot-service:
        condition: service_healthy
      mcp-service:
        condition: service_healthy
    networks:
      - default

  db-service:
    build:
      context: ./dbService
      dockerfile: Dockerfile
    volumes:
      - ./dbService/src:/app/src
      - ./dbService/package.json:/app/package.json
      - ./dbService/tsconfig.json:/app/tsconfig.json
      - ./shared:/app/shared
    environment:
      - PORT=${PORT_DB}
      - NODE_ENV=${NODE_ENV}
      - CLOUDQUERY_SERVICE_KEY=${CLOUDQUERY_SERVICE_KEY}
      - MONGODB_URL=${MONGODB_URL}
      - NEO4J_URL=${NEO4J_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    ports:
      - "4003:4003"
    depends_on:
      mongodb:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: wget -O /dev/null -q http://localhost:4003/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - default
      - query-network

  cloud-query-service:
    build:
      context: ./cloudQueryService
      dockerfile: Dockerfile
      target: production
    volumes:
      - ./cloudQueryService/src:/app/src
      - ./cloudQueryService/package.json:/app/package.json
      - ./cloudQueryService/tsconfig.json:/app/tsconfig.json
      - ./cloudQueryService/.env.development:/app/.env
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket
    environment:
      - PORT=${PORT_CLOUD}    
      - NODE_ENV=${NODE_ENV}
      - QUERY_IMAGE=${QUERY_IMAGE}
      - VALIDATE_IMAGE=${VALIDATE_IMAGE}
      - QUERY_NETWORK=${QUERY_NETWORK}
      - LOG_LEVEL=${LOG_LEVEL}
      - SERVICE_KEY=${SERVICE_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - DB_SERVICE_URL=${DB_SERVICE_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - PLATFORM=${PLATFORM}
    ports:
      - "4004:4004"
    depends_on:
      db-service:
        condition: service_healthy
    healthcheck:
      test: wget -O /dev/null -q http://localhost:4004/status || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - default
      - query-network
    privileged: true  # Give container privileged access for Docker operations

  chatbot-service:
    build:
      context: ./chatbotService
      dockerfile: Dockerfile
      target: production
    volumes:
      - ./chatbotService/src:/app/src
      - ./chatbotService/package.json:/app/package.json
      - ./chatbotService/tsconfig.json:/app/tsconfig.json
      - ./shared:/app/shared
      - ./.env:/app/.env
    environment:
      - PORT=${PORT_CHATBOT}
      - NODE_ENV=${NODE_ENV}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DB_SERVICE_URL=${DB_SERVICE_URL}
      - MCP_SERVICE_URL=${MCP_SERVICE_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - FRONTEND_URL=${FRONTEND_URL}
    ports:
      - "4005:4005"
    depends_on:
      db-service:
        condition: service_healthy
      mcp-service:
        condition: service_healthy
    healthcheck:
      test: wget -O /dev/null -q http://localhost:4005/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - default

  mcp-service:
    build:
      context: ./mcpService
      dockerfile: Dockerfile
      target: production
    volumes:
      - ./mcpService/src:/app/src
      - ./mcpService/package.json:/app/package.json
      - ./mcpService/tsconfig.json:/app/tsconfig.json
      - ./shared:/app/shared
      - ./.env:/app/.env
    environment:
      - PORT=${PORT_MCP}
      - NODE_ENV=${NODE_ENV}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DB_SERVICE_URL=${DB_SERVICE_URL}
    ports:
      - "4006:4006"
    depends_on:
      db-service:
        condition: service_healthy
    healthcheck:
      test: wget -O /dev/null -q http://localhost:4006/api/mcp/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - default

networks:
  default:
    driver: bridge
  query-network:
    driver: bridge
    name: query-network  # Explicitly name the network
